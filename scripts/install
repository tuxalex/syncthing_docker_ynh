#!/bin/bash
app=syncthing_docker
redirectport=8384
notredirectport=(22000 21027)
support_multiuser=false

set -e

# Retrieve arguments
domain=$1
path=$2
is_public=$3
username=$4
owncloud=$5

# Check if user is available
sudo yunohost user list --json | grep -q "\"username\": \"$username\""
if [[ ! $? -eq 0 ]]; then
  	exit 1
fi

# Remove trailing "/" for next commands and add user name path
path=${path%/}
if ! $support_multiuser ; then
        path=$path$username
fi
containername=${path#/}

# Check domain/path availability
domain=${domain%/}
sudo yunohost app checkurl $domain$path -a $app \
	|| (echo "Path not available: $domain$path" && exit 1)

dockerized=true
#Test if yunohost is dockerized and install docker
if [ ! -f /.dockerinit ]; then
	
	# Install Docker if it is not installed yet
	if [ -f /usr/bin/docker ]; then
		echo "Docker is already installed"
	else
		echo "Docker will now be installed"
		sudo apt-get install curl -y -qq
		curl -sSL https://get.docker.com/gpg | sudo apt-key add -
		curl -sSL https://get.docker.com/ | sh	
	 	sudo yunohost service add docker
		sudo update-rc.d docker defaults
		sudo service docker start 
		sudo usermod -aG docker admin
		newgrp docker
	fi
	sudo service docker restart
	#Symbolic link because there may be some problems to mount container volume with /var/run/docker.sock inside a container  
	sudo ln -s /var/run/docker.sock /docker.sock
	dockerized=fales

	# Check ports are available  
	for p in ${ports[*]}
	do
	       	sudo yunohost app checkport $ports
		if [[ ! $? -eq 0 ]]; then
	               	exit 1
	       	fi
	done
fi

#Install pip if it is not installed yet
if [ -f /usr/bin/pip ]; then
		echo "pip installer is already installed"
	else
		echo "pip installer will now be installed"
		sudo apt-get install python-pip
fi

#Install or upgrade docker-py
echo "Install or upgrade docker-py"
sudo pip install docker-py --upgrade

#TODO:test directory
sudo mkdir -p /home/yunohost.docker/
sudo mkdir -p /home/yunohost.docker/container-$app/$username
sudo mkdir -p /home/yunohost.docker/container-$app/$username/config/

#Owncloud support or not
if [ "$owncloud" = "Yes" ];then
	sudo ls /home/yunohost.app/owncloud/data/ | grep -q $username
	if [ $? -eq 0 ];then
			datapath='/home/yunohost.app/owncloud/data/'$username'/files/'
	else 
		exit 1
	fi
else
	sudo mkdir -p /home/yunohost.docker/container-$app/$username/data/
	datapath='/home/yunohost.docker/container-'$app'/'$username'/data/'
fi
 
#Test ports if yunohost is not dockerized
if  ! $dockerized ;then
        
	#Only one port is redirect by nginx
	sudo yunohost app checkport $redirectport
        if [[ ! $? -eq 0 ]]; then
              exit 1
        fi

	#Multiple ports can be open and not redirecting by nginx
	for nrp in ${notredirectport[*]}
        do
                sudo yunohost app checkport $nrp
                if [[ ! $? -eq 0 ]]; then
                        exit 1
                fi
                #Open non redirect port 
                sudo yunohost firewall allow TCP $nrp
                sudo yunohost firewall allow UDP $nrp

	done
fi

#Create Docker container via python script
echo "Start building container, please wait..."
output=$(sudo python build_container.py $app $username $datapath $containername $(hostname) $dockerized)

#Get info of container network (ip and external ports)
#ip=$(echo $output | cut -f2 -d,)
#ip=$(echo $ip | grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}") #force ip format
#redirectport=$(echo $output | cut -f3 -d,)
#notredirectport=$(echo $output | cut -f4 -d,)
ip=127.0.0.1
#Create init script for the container
if [ -f /bin/systemd ]; then
	#Manage container as daemon with systemd - only compatible with Debian Jessie & YNH 2.2
	sudo sed -i "s@CONTAINERNAME@$containername@g" ../conf/systemd.service
	sudo cp ../conf/systemd.service /etc/systemd/system/container-$containername.service
	sudo chmod 777 /etc/systemd/system/container-$containername.service
	sudo systemctl enable /etc/systemd/system/container-$containername.service
	sudo systemctl daemon-reload
else
	#Manage container as daemon with sysV
	sudo sed -i "s@CONTAINERNAME@$containername@g" ../conf/sysv.sh
	sudo cp ../conf/sysv.sh /etc/init.d/$containername
	sudo chmod 777 /etc/init.d/$containername
	sudo update-rc.d $containername defaults
fi

# Add the redirection
sudo sed -i "s@PATHTOCHANGE@$path@g" ../conf/nginx.conf
sudo sed -i "s@USERNAME@$username@g" ../conf/nginx.conf
sudo sed -i "s@CONTAINERIP@$ip@g" ../conf/nginx.conf
sudo sed -i "s@PORT@$redirectport@g" ../conf/nginx.conf
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$containername.conf

sudo yunohost app setting $app user -v "$username"
sudo yunohost app setting $app domain -v "$domain"
sudo yunohost app setting $app path -v "$path"

if [ "$is_public" = "Yes" ];
then
	sudo yunohost app setting $app skipped_uris -v "/"
fi

# Reload
sudo service nginx reload
sudo yunohost app ssowatconf
