#!/bin/bash

# Exit on command errors and treat unset variables as an error
set -eu

app=$YNH_APP_INSTANCE_NAME
redirectport=8384
notredirectports=(22000, 21027)
allports=(8384, 22000, 21027)
support_multiuser=false

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN #($1)
path=$YNH_APP_ARG_PATH #($2)
is_public=$YNH_APP_ARG_IS_PUBLIC #($3)
username=$YNH_APP_ARG_USERNAME #($4)
owncloud=$YNH_APP_ARG_OWNCLOUD #($5)
language=$YNH_APP_ARG_LANGUAGE #($6)
admin=admin

# Source YunoHost helpers
. /usr/share/yunohost/helpers

# Save app settings
#sudo yunohost app setting $app user -v "$username"
#sudo yunohost app setting $app domain -v "$domain"
#sudo yunohost app setting $app path -v "$path"
#sudo yunohost app setting $app admin -v "$admin"
#sudo yunohost app setting $app domain -v "$is_public"
#sudo yunohost app setting $app path -v "$language"
ynh_app_setting_set $app user $username
ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app is_public $is_public
ynh_app_setting_set $app language $language

# Check if user is available
sudo yunohost user list --json | grep -q "\"username\": \"$username\""
if [[ ! $? -eq 0 ]]; then
  	return 1
fi

# Remove trailing "/" for next commands and add user name path
if $support_multiuser; then
        path=${path%/}
else
        echo "Add username to path"
        path=${path%/}_${username}
fi

containername=${path#/}_${username}

# Check domain/path availability
domain=${domain%/}
sudo yunohost app checkurl ${domain}${path} -a $app \
#	|| (echo "Path not available: ${domain}${path}" && return 1)
	|| ynh_die "Path not available: ${domain}${path}"

dockerized=True
#Test if yunohost is dockerized and install docker
if [ ! -f /.dockerinit ]; then
	
	# Install Docker if it is not installed yet
	if [ -f /usr/bin/docker ]; then
		echo "Docker is already installed"
	else
		echo "Docker will now be installed"
		sudo apt-get install curl -y -qq
		curl -sSL https://get.docker.com/gpg | sudo apt-key add -
		curl -sSL https://get.docker.com/ | sh	
	 	sudo yunohost service add docker
		sudo update-rc.d docker defaults
		sudo service docker start 
		sudo usermod -aG docker admin
		newgrp docker
	fi
	sudo service docker restart
	#Symbolic link because there may be some problems to mount container volume with /var/run/docker.sock inside a container  
	sudo ln -s /var/run/docker.sock /docker.sock
	dockerized=Fales

        #Only one port is redirect by nginx (http or https port), test if this port is available
        sudo yunohost app checkport $redirectport
        if [[ ! $? -eq 0 ]]; then
              return 1
        fi

        #Multiple ports can be open and not redirecting by nginx, test if those ports are available and open it
        for nrp in ${notredirectports[*]}
        do
                sudo yunohost app checkport $nrp
                if [[ ! $? -eq 0 ]]; then
                        return 1
                fi
                #Open non redirect port 
                sudo yunohost firewall allow TCP $nrp
                sudo yunohost firewall allow UDP $nrp

        done

fi


#Install pip if it is not installed yet
if [ -f /usr/bin/pip ]; then
		echo "pip installer is already installed"
	else
		echo "pip installer will now be installed"
		sudo apt-get install python-pip
fi

#Install or upgrade docker-py
echo "Install or upgrade docker-py"
sudo pip install docker-py --upgrade

#Create directories
if [ ! -d /home/yunohost.docker/ ]; then
   sudo mkdir -p /home/yunohost.docker/
fi

if [ ! -d /home/yunohost.docker/container-${app}/${username}/ ]; then
   sudo mkdir -p /home/yunohost.docker/container-${app}/${username}/
fi

if [ ! -d /home/yunohost.docker/container-${app}/${username}/config/ ]; then
   sudo mkdir -p /home/yunohost.docker/container-${app}/${username}/config/
fi

#Owncloud support or not
if [ "$owncloud" = "Yes" ];then
	sudo ls /home/yunohost.app/owncloud/data/ | grep -q $username
	if [ $? -eq 0 ];then
			datapath="/home/yunohost.app/owncloud/data/${username}/files/"
	else 
		return 1
	fi
else
        if [ ! -d /home/yunohost.docker/container-${app}/${username}/data/ ]; then
	    sudo mkdir -p /home/yunohost.docker/container-${app}/${username}/data/
        fi
	datapath="/home/yunohost.docker/container-${app}/${username}/data/"
fi

#Create Docker container via python script
echo "Start building container, please wait..."
output=$(sudo python build_container.py $app $username $datapath $containername $allports $(hostname) $dockerized)

#Get info of container network (ip and external ports)
#ip=$(echo $output | cut -f2 -d,)
#ip=$(echo $ip | grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}") #force ip format
#redirectport=$(echo $output | cut -f3 -d,)
#notredirectports=$(echo $output | cut -f4 -d,)
ip=127.0.0.1
#Create init script for the container
if [ -f /bin/systemd ]; then
	#Manage container as daemon with systemd - only compatible with Debian Jessie & YNH 2.2
	sudo sed -i "s@CONTAINERNAME@$containername@g" ../conf/systemd.service
	sudo cp ../conf/systemd.service /lib/systemd/system/container-$containername.service
	sudo chmod +x /lib/systemd/system/container-$containername.service
	sudo systemctl enable /lib/systemd/system/container-$containername.service
	sudo systemctl daemon-reload
else
	#Manage container as daemon with sysV
	sudo sed -i "s@CONTAINERNAME@$containername@g" ../conf/sysv.sh
	sudo cp ../conf/sysv.sh /etc/init.d/$containername
	sudo chmod +x /etc/init.d/$containername
	sudo update-rc.d $containername defaults
fi

# Add the redirection
sudo sed -i "s@PATHTOCHANGE@$path@g" ../conf/nginx.conf
sudo sed -i "s@USERNAME@$username@g" ../conf/nginx.conf
sudo sed -i "s@CONTAINERIP@$ip@g" ../conf/nginx.conf
sudo sed -i "s@PORT@$redirectport@g" ../conf/nginx.conf
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/${domain}.d/${containername}.conf


if [ "$is_public" = "Yes" ];
then
	#sudo yunohost app setting $app skipped_uris -v "/"
	ynh_app_setting_set $app unprotected_uris "/"
fi

# Reload
sudo service nginx reload
sudo yunohost app ssowatconf
